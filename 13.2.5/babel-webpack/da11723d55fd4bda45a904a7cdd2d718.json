{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from './../environments/environment';\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SpotifyTokenService = /*#__PURE__*/(() => {\n  class SpotifyTokenService {\n    constructor(http) {\n      this.http = http;\n      this.clientID = environment.clientID;\n      this.clientSecret = environment.clientSecret;\n      this.accessToken = \"\";\n      this.accessTokenExpires = new Date();\n    }\n\n    getAccessToken() {\n      return new Observable(o => {\n        let auth = btoa(`${this.clientID}:${this.clientSecret}`);\n        const authBody = new HttpParams().set('grant_type', 'client_credentials');\n        this.tokenSub = this.http.post(\"https://accounts.spotify.com/api/token\", authBody.toString(), {\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'Authorization': `Basic ${auth}`\n          }\n        }).subscribe(token => {\n          this.accessToken = token.access_token;\n          this.accessTokenExpires = new Date();\n          this.accessTokenExpires.setSeconds(this.accessTokenExpires.getSeconds() + token.expires_in);\n          o.next(this.accessToken);\n        });\n      });\n    }\n\n    getBearerToken() {\n      if (!this.accessToken) {\n        // no access token, so get a fresh one\n        return this.getAccessToken();\n      } else {\n        if (new Date() < this.accessTokenExpires) {\n          // access token exists and is valid, so return it\n          return new Observable(o => o.next(this.accessToken));\n        } else {\n          // access token exists, but is no longer valid, so get a fresh one\n          return this.getAccessToken();\n        }\n      }\n    }\n\n    ngOnDestroy() {\n      var _a;\n\n      (_a = this.tokenSub) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n    }\n\n  }\n\n  SpotifyTokenService.ɵfac = function SpotifyTokenService_Factory(t) {\n    return new (t || SpotifyTokenService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  SpotifyTokenService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SpotifyTokenService,\n    factory: SpotifyTokenService.ɵfac,\n    providedIn: 'root'\n  });\n  return SpotifyTokenService;\n})();","map":null,"metadata":{},"sourceType":"module"}